name: hybris-core22
license: Apache-2.0
base: core22
summary: libhybris libraries for core22 snaps
description: |
  A content snap containing the libhybris libraries and drivers for `base: core22` snaps.

  It supports a broad range of hardware through the Mesa stack as well as Nvidia
  drivers installed from your distribution through the native SnapD support.

  To make use of this snap in your application, allowing for GPU acceleration on
  a broader set of hardware without including the drivers in your snap, refer to the
  documentation below:

  https://mir-server.io/docs/the-graphics-core22-snap-interface
website: https://github.com/canonical/mesa-core22
contact: https://github.com/canonical/mesa-core22/issues

compression: lzo
version: "latest"

grade: stable
confinement: strict

architectures:
  - build-on: arm64
  - build-on: armhf

package-repositories:
  - type: apt
    url: http://archive.ubuntu.com/ubuntu
    suites: [jammy]
    components: [main, universe]
    architectures: [i386]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    key-server: keyserver.ubuntu.com

parts:
  apis:
    # This provides the essential APIs
    #   o libGL.so.0
    #   o libEGL.so.1
    #   o libva.so.2
    #   o libvulkan.so.1
    #   o libgbm.so.1
    #
    plugin: nil
    stage-packages:
      - libgl1
      - libegl1
      - libgles2
      - libvulkan1
      - libgbm1
    prime:
      - usr/lib
      - usr/share/doc/*/copyright
      - usr/share/glvnd

  drm:
    # DRM userspace
    #   o libdrm.so.2
    plugin: nil
    stage-packages:
      - libdrm2
      - libdrm-common
    organize:
      # Expected at /libdrm by the `graphics-core22` interface
      usr/share/libdrm: libdrm
    prime:
      - usr/lib
      - usr/share/doc/*/copyright
      - libdrm

  va:
    # Video Acceleration API
    #   o libva.so.2
    plugin: nil
    stage-packages:
      - libva2
      - libva-drm2
      - libva-x11-2
      - libva-wayland2
    prime:
      - usr/lib
      - usr/share/doc/*/copyright

  dri:
    # Userspace drivers
    plugin: nil
    stage-packages:
      - libgl1-mesa-dri
      - va-driver-all
      - vdpau-driver-all
      - libvdpau-va-gl1
      - mesa-vulkan-drivers
      - libglx-mesa0
    organize:
      # Expected at /drirc.d by the `graphics-core22` interface
      usr/share/drirc.d: drirc.d
    prime:
      - usr/lib
      - usr/share/doc/*/copyright
      - usr/share/vulkan
      - drirc.d
    override-stage: |
      sed -i 's@/usr/lib/[a-z0-9_-]\+/@@' ${CRAFT_PART_INSTALL}/usr/share/vulkan/*/*.json
      craftctl default

  x11:
    # X11 support (not much cost to having this)
    #   o libGLX.so.0
    plugin: nil
    stage-packages:
      - libglx0
      - libx11-xcb1
      - libxau6
      - libxcb-dri2-0
      - libxcb-dri3-0
      - libxcb-present0
      - libxcb-sync1
      - libxcb-xfixes0
      - libxcb1
      - libxdamage1
      - libxdmcp6
      - libxshmfence1
    organize:
      # Expected at /X11 by the `graphics-core22` interface
      usr/share/X11: X11
    prime:
      - usr/lib
      - usr/share/doc/*/copyright
      - X11

  wayland:
    # Wayland support (not much cost to having this)
    plugin: nil
    stage-packages:
      - libwayland-client0
      - libwayland-cursor0
      - libwayland-egl1
      - libwayland-server0
      - libnvidia-egl-wayland1
    prime:
      - usr/lib
      - usr/share/doc/*/copyright
      - usr/share/egl/egl_external_platform.d

  tls-padding:
    plugin: make
    source: https://gitlab.com/ubports/development/core/hybris-support/tls-padding.git
    source-branch: main
    override-build: |
      export PREFIX=$CRAFT_PART_INSTALL/usr
      make
      mkdir -p $PREFIX/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
      cp libtls-padding.so $PREFIX/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/

  android-headers:
    plugin: autotools
    source: https://github.com/Halium/android-headers.git
    source-branch: halium-11.0
    override-build: |
      export PREFIX=$CRAFT_PART_INSTALL/usr
      make
      make install

  hybris:
    # This provides the essential APIs
    #   o libGL.so.0
    #   o libEGL.so.1
    after: [ android-headers ]
    plugin: autotools
    source: https://github.com/libhybris/libhybris.git
    source-branch: master
    build-packages:
      - pkg-config
      - libwayland-dev
      - libwayland-egl-backend-dev
      - libglvnd-dev
    build-environment:
      - CFLAGS: -Wno-pointer-to-int-cast
      - CXXFLAGS: -Wno-pointer-to-int-cast
    override-build: |
      ARCH=arm64
      [ "$CRAFT_ARCH_BUILD_FOR" == "armhf" ] && ARCH=arm
      HYBRISLDPATH="/system/lib64:/vendor/lib64:/odm/lib64"
      [ "$CRAFT_ARCH_BUILD_FOR" == "armhf" ] && HYBRISLDPATH="/system/lib:/vendor/lib:/odm/lib"
      cd $CRAFT_PART_SRC_WORK/hybris
      export PKG_CONFIG_PATH=$CRAFT_STAGE/usr/lib/pkgconfig
      ./autogen.sh
      ./configure --prefix=/usr --enable-arch=$ARCH --enable-wayland --enable-glvnd \
          --with-android-headers=$CRAFT_STAGE/usr/include/android \
          --enable-mali-quirks --enable-experimental --enable-debug --enable-trace \
          --with-default-hybris-ld-library-path=$HYBRISLDPATH --with-default-egl-platform=wayland
      CFLAGS=-Wno-pointer-to-int-cast CXXFLAGS=-Wno-pointer-to-int-cast make -j$(nproc --all)
      DESTDIR=$CRAFT_PART_INSTALL make install
    override-prime: |
      craftctl default
      # Move libhybris where it belongs
      rm -f ${CRAFT_PRIME}/usr/lib/*.la
      [ -e ${CRAFT_PRIME}/usr/lib/libEGL_libhybris.so ] && \
          mv ${CRAFT_PRIME}/usr/lib/*.so* ${CRAFT_PRIME}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/
      [ -d ${CRAFT_PRIME}/usr/lib/libhybris ] && \
        mv ${CRAFT_PRIME}/usr/lib/libhybris ${CRAFT_PRIME}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/
      [ -d ${CRAFT_PRIME}/usr/lib/pkgconfig ] && \
        rm -rf ${CRAFT_PRIME}/usr/lib/pkgconfig
    # prime:
    #   - usr/lib

  file-list:
    after:
    - apis
    - drm
    - dri
    - va
    - x11
    - wayland
    - tls-padding
    - hybris
    plugin: nil
    override-prime: |
      mkdir -p ${CRAFT_PRIME}/snap
      (
        cd ${CRAFT_PART_INSTALL}/../..
        # All the cruft coming from stage packages, but not actually staged
        find $( ls -d */install/{etc,usr/{bin,share/{bug,doc,gcc,gdb,lintian,man}}} ) -type f,l | cut -d/ -f3-
        cd ${CRAFT_PRIME}
        # Everything that is indeed staged
        find usr -type f,l
        # The re-organized bits
        find drirc.d libdrm X11 -type f,l | awk '{ print "usr/share/" $0 }'
      ) | sort -u > ${CRAFT_PRIME}/snap/${CRAFT_TARGET_ARCH}.list

  scripts:
    after: [file-list]
    plugin: nil
    source: scripts
    override-build: |
      set -x
      SCRIPT=bin/graphics-core22-provider-wrapper
      ARCH_TRIPLETS=( ${CRAFT_ARCH_TRIPLET} )

      [ ${CRAFT_TARGET_ARCH} == amd64 ] && ARCH_TRIPLETS+=( i386-linux-gnu )

      mkdir -p ${CRAFT_PART_INSTALL}/bin
      sed "s/@ARCH_TRIPLETS@/${ARCH_TRIPLETS[*]}/" \
        ${CRAFT_PART_SRC}/${SCRIPT}.in \
        > ${CRAFT_PART_INSTALL}/${SCRIPT}
      chmod 555 ${CRAFT_PART_INSTALL}/${SCRIPT}

slots:
  graphics-core22:
    interface: content
    read: [$SNAP]
